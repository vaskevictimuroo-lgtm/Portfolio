import os
import time
import threading
import urllib.request
from http.server import HTTPServer, BaseHTTPRequestHandler
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from collections import defaultdict
import sys
import psutil
import requests
from datetime import datetime, timedelta

load_dotenv()

cold_start = True


def get_bot_token():
    token = os.getenv('BOT_TOKEN')
    if not token:
        token = "7848065335:AAG2Ek4Kh76L4m3NPxN39FsuFm7aFMAz5Zw"

    if not token or token == "YOUR_BOT_TOKEN_HERE":
        raise ValueError("Bot token not found! Set BOT_TOKEN environment variable")

    return token


BOT_TOKEN = get_bot_token()
bot = telebot.TeleBot(BOT_TOKEN)

moderators_chat_id = -1003005577058
moderators = set()
user_messages = {}
waiting_for_moderators_chat = False

user_message_timestamps = defaultdict(list)
MAX_MESSAGES_PER_MINUTE = 20

OWNER_ID = 5492264667


def keep_alive_ping():
    ping_urls = [
        'https://test-plqd.onrender.com/health',
        'https://test-plqd.onrender.com/'
    ]

    while True:
        success = False
        for url in ping_urls:
            try:
                response = requests.get(url, timeout=30)
                print(f"‚úÖ Keep-alive ping to {url}: {response.status_code}")
                success = True
                break
            except Exception as e:
                print(f"‚ùå Keep-alive failed for {url}: {e}")

        if not success:
            print("‚ö†Ô∏è All keep-alive attempts failed")

        time.sleep(300)


def start_keep_alive():
    ping_thread = threading.Thread(target=keep_alive_ping, daemon=True)
    ping_thread.start()


def handle_cold_start():
    global cold_start
    if cold_start:
        print("üî• Cold start - bot was sleeping")
        cold_start = False
        try:
            if OWNER_ID:
                bot.send_message(
                    OWNER_ID,
                    "ü§ñ –ë–æ—Ç –ø—Ä–æ—Å–Ω—É–ª—Å—è –ø–æ—Å–ª–µ —Å–Ω–∞\n"
                    f"‚è∞ –í—Ä–µ–º—è: {time.strftime('%Y-%m-%d %H:%M:%S')}"
                )
        except Exception as e:
            print(f"‚ö†Ô∏è Could not send cold start notification: {e}")


class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        try:
            if self.path == '/health' or self.path == '/':
                self.send_response(200)
                self.send_header('Content-type', 'text/plain')
                self.end_headers()
                self.wfile.write(b'OK')
                print(f"‚úÖ Health check: {self.path}")
            else:
                self.send_response(200)
                self.send_header('Content-type', 'text/plain')
                self.end_headers()
                self.wfile.write(b'Telegram Bot is running!')
                print(f"‚úÖ Request: {self.path}")

        except Exception as e:
            print(f"‚ùå HTTP error: {e}")
            self.send_error(500, f"Server error: {e}")

    def do_HEAD(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()

    def do_OPTIONS(self):
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, HEAD, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', '*')
        self.end_headers()

    def log_message(self, format, *args):
        print(f"üåê HTTP: {self.address_string()} - {self.command} {self.path}")


def run_http_server():
    port = 5000
    try:
        server = HTTPServer(('0.0.0.0', port), HealthHandler)
        print(f"üåê HTTP server running on port {port}")
        server.serve_forever()
    except Exception as e:
        print(f"‚ùå HTTP server crashed: {e}")
        time.sleep(5)
        run_http_server()


def check_flood(user_id):
    now = time.time()

    user_message_timestamps[user_id] = [
        t for t in user_message_timestamps[user_id]
        if now - t < 300
    ]

    messages_last_minute = [t for t in user_message_timestamps[user_id] if now - t < 60]
    messages_last_5min = user_message_timestamps[user_id]

    if len(messages_last_minute) >= 5:
        return False
    if len(messages_last_5min) >= 20:
        return False

    user_message_timestamps[user_id].append(now)
    return True


def create_reply_keyboard(user_id):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üì® –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user_id}"))
    return keyboard


def refresh_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤", callback_data="refresh_mods"))
    return keyboard


def update_moderators_from_chat():
    global moderators
    if not moderators_chat_id:
        return False

    try:
        chat_admins = bot.get_chat_administrators(moderators_chat_id)
        moderators.clear()

        moderators.add(OWNER_ID)

        for admin in chat_admins:
            if not admin.user.is_bot:
                moderators.add(admin.user.id)

        print(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {moderators}")
        return True

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
        return False


def is_moderator(user_id):
    if user_id == OWNER_ID:
        return True

    return user_id in moderators


def get_user_info(user_id):
    try:
        user = bot.get_chat(user_id)
        info = f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n"
        info += f"‚Ä¢ ID: {user.id}\n"
        info += f"‚Ä¢ –ò–º—è: {user.first_name}\n"
        if user.last_name:
            info += f"‚Ä¢ –§–∞–º–∏–ª–∏—è: {user.last_name}\n"
        if user.username:
            info += f"‚Ä¢ @username: @{user.username}\n"

        msg_count = len(user_message_timestamps[user_id])
        info += f"‚Ä¢ üìä –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {msg_count}\n"

        return info
    except Exception as e:
        return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}"


@bot.message_handler(commands=['start'])
def start_command(message):
    handle_cold_start()
    if message.from_user.id == OWNER_ID:
        bot.send_message(message.chat.id,
                         "üëã –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                         "/setup - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤\n"
                         "/refresh - –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤\n"
                         "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
                         f"‚úÖ –í–∞—à ID: {message.from_user.id}\n"
                         f"‚úÖ –í—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä: {is_moderator(message.from_user.id)}")
    elif moderators_chat_id and message.chat.id == moderators_chat_id:
        if update_moderators_from_chat():
            bot.send_message(message.chat.id,
                             f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤! –í–∞—à–∏ –ø—Ä–∞–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.\n"
                             f"‚úÖ –í—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä: {is_moderator(message.from_user.id)}",
                             reply_markup=refresh_keyboard())
        else:
            bot.send_message(message.chat.id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —Ä–∞–±–æ—Ç—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É.")
    else:
        bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.")


@bot.message_handler(commands=['setup'])
def setup_command(message):
    handle_cold_start()
    if message.from_user.id == OWNER_ID:
        global waiting_for_moderators_chat
        waiting_for_moderators_chat = True
        bot.send_message(message.chat.id,
                         "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ (—Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!) –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞:")
    else:
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É.")


@bot.message_handler(commands=['refresh'])
def refresh_command(message):
    handle_cold_start()
    if is_moderator(message.from_user.id):
        if update_moderators_from_chat():
            bot.send_message(message.chat.id,
                             f"‚úÖ –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω! –í—Å–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {len(moderators)}\n"
                             f"üëë –í–ª–∞–¥–µ–ª–µ—Ü: {OWNER_ID}\n"
                             f"‚úÖ –í—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä: {is_moderator(message.from_user.id)}",
                             reply_markup=refresh_keyboard())
        else:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞.")
    else:
        bot.send_message(message.chat.id,
                         f"‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.\n"
                         f"–í–∞—à ID: {message.from_user.id}")


@bot.message_handler(commands=['stats'])
def stats_command(message):
    handle_cold_start()
    if message.from_user.id == OWNER_ID:
        stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
        stats_text += f"‚Ä¢ –ß–∞—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {moderators_chat_id or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
        stats_text += f"‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {len(moderators)}\n"
        stats_text += f"‚Ä¢ –í–ª–∞–¥–µ–ª–µ—Ü: {OWNER_ID}\n"
        stats_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_message_timestamps)}\n"
        stats_text += f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏: {len(user_messages)}"
        bot.send_message(message.chat.id, stats_text)
    else:
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É.")


@bot.message_handler(commands=['status'])
def status_command(message):
    handle_cold_start()

    status_text = (
        f"ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n"
        f"‚Ä¢ üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è: {len(user_message_timestamps)}\n"
        f"‚Ä¢ üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {len(moderators)}\n"
        f"‚Ä¢ üëë –í–ª–∞–¥–µ–ª–µ—Ü: {OWNER_ID}\n"
        f"‚Ä¢ üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {time.strftime('%H:%M:%S')}\n"
        f"‚Ä¢ ‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω—ã–π —Å—Ç–∞—Ä—Ç: {'–î–∞' if cold_start else '–ù–µ—Ç'}\n"
        f"‚Ä¢ ‚úÖ –í—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä: {is_moderator(message.from_user.id)}"
    )

    bot.send_message(message.chat.id, status_text)


@bot.message_handler(commands=['info'])
def info_command(message):
    handle_cold_start()
    if not is_moderator(message.from_user.id):
        bot.send_message(message.chat.id,
                         f"‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.\n"
                         f"–í–∞—à ID: {message.from_user.id}")
        return

    if message.reply_to_message:
        reply_to_msg_id = message.reply_to_message.message_id
        if reply_to_msg_id in user_messages:
            user_id = user_messages[reply_to_msg_id]
            info = get_user_info(user_id)
            bot.send_message(message.chat.id, info)
        else:
            bot.send_message(message.chat.id, "‚ùå –≠—Ç–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    else:
        bot.send_message(message.chat.id, "‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")


@bot.message_handler(commands=['debug'])
def debug_command(message):
    handle_cold_start()
    if message.from_user.id == OWNER_ID:
        debug_text = f"üîß –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
        debug_text += f"‚Ä¢ –í–∞—à ID: {message.from_user.id}\n"
        debug_text += f"‚Ä¢ –í–ª–∞–¥–µ–ª–µ—Ü: {OWNER_ID}\n"
        debug_text += f"‚Ä¢ –í—ã –≤–ª–∞–¥–µ–ª–µ—Ü: {message.from_user.id == OWNER_ID}\n"
        debug_text += f"‚Ä¢ –í—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä: {is_moderator(message.from_user.id)}\n"
        debug_text += f"‚Ä¢ –ß–∞—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {moderators_chat_id}\n"
        debug_text += f"‚Ä¢ –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {moderators}\n"
        debug_text += f"‚Ä¢ –í—Å–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {len(moderators)}"
        bot.send_message(message.chat.id, debug_text)
    else:
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É.")


@bot.message_handler(content_types=['text'])
def handle_text(message):
    handle_cold_start()
    global waiting_for_moderators_chat

    if message.text.startswith('/'):
        return

    if waiting_for_moderators_chat:
        setup_moderators_chat(message)
        return

    if moderators_chat_id and message.chat.id == moderators_chat_id:
        handle_moderator_chat_message(message)
    elif message.from_user.id == OWNER_ID and message.chat.type == 'private':
        handle_owner_message(message)
    else:
        if not check_flood(message.from_user.id):
            bot.send_message(message.chat.id, "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
            return

        forward_to_moderators_chat(message)


@bot.message_handler(content_types=['photo', 'document', 'video', 'audio', 'voice', 'sticker'])
def handle_media(message):
    handle_cold_start()

    if moderators_chat_id and message.chat.id == moderators_chat_id:
        handle_moderator_chat_message(message)
    else:
        if not check_flood(message.from_user.id):
            bot.send_message(message.chat.id, "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
            return

        forward_to_moderators_chat(message)


def setup_moderators_chat(message):
    global moderators_chat_id, waiting_for_moderators_chat

    if message.forward_from_chat:
        moderators_chat_id = message.forward_from_chat.id
        waiting_for_moderators_chat = False

        if update_moderators_from_chat():
            bot.send_message(message.chat.id,
                             f"‚úÖ –ß–∞—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! ID: {moderators_chat_id}\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {len(moderators)}")
            bot.send_message(moderators_chat_id,
                             "‚úÖ –≠—Ç–æ—Ç —á–∞—Ç —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è —á–∞—Ç–æ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤! –í—Å–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞ –º–æ–≥—É—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                             reply_markup=refresh_keyboard())
        else:
            bot.send_message(message.chat.id,
                             "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ.")

    elif message.chat.type in ['group', 'supergroup']:
        moderators_chat_id = message.chat.id
        waiting_for_moderators_chat = False

        if update_moderators_from_chat():
            bot.send_message(message.chat.id,
                             f"‚úÖ –≠—Ç–æ—Ç —á–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤! ID: {moderators_chat_id}\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {len(moderators)}",
                             reply_markup=refresh_keyboard())
        else:
            bot.send_message(message.chat.id,
                             "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ.")

    else:
        bot.send_message(message.chat.id,
                         "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ.")


def forward_to_moderators_chat(message):
    if not moderators_chat_id:
        bot.send_message(message.chat.id, "‚ùå –ß–∞—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    user_id = message.from_user.id
    user_name = message.from_user.first_name
    if message.from_user.username:
        user_name += f" (@{message.from_user.username})"

    try:
        if message.content_type == 'text':
            sent_message = bot.send_message(
                moderators_chat_id,
                f"üë§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} (ID: {user_id}):\n\n{message.text}",
                reply_markup=create_reply_keyboard(user_id)
            )
        else:
            caption = f"üë§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} (ID: {user_id})"
            if message.caption:
                caption += f":\n\n{message.caption}"

            if message.content_type == 'photo':
                sent_message = bot.send_photo(
                    moderators_chat_id,
                    message.photo[-1].file_id,
                    caption=caption,
                    reply_markup=create_reply_keyboard(user_id)
                )
            elif message.content_type == 'document':
                sent_message = bot.send_document(
                    moderators_chat_id,
                    message.document.file_id,
                    caption=caption,
                    reply_markup=create_reply_keyboard(user_id)
                )
            elif message.content_type == 'video':
                sent_message = bot.send_video(
                    moderators_chat_id,
                    message.video.file_id,
                    caption=caption,
                    reply_markup=create_reply_keyboard(user_id)
                )
            elif message.content_type == 'audio':
                sent_message = bot.send_audio(
                    moderators_chat_id,
                    message.audio.file_id,
                    caption=caption,
                    reply_markup=create_reply_keyboard(user_id)
                )
            elif message.content_type == 'voice':
                sent_message = bot.send_voice(
                    moderators_chat_id,
                    message.voice.file_id,
                    caption=caption,
                    reply_markup=create_reply_keyboard(user_id)
                )
            elif message.content_type == 'sticker':
                sent_message = bot.send_sticker(
                    moderators_chat_id,
                    message.sticker.file_id
                )
                bot.send_message(
                    moderators_chat_id,
                    f"üë§ –°—Ç–∏–∫–µ—Ä –æ—Ç {user_name} (ID: {user_id})",
                    reply_markup=create_reply_keyboard(user_id)
                )

        user_messages[sent_message.message_id] = user_id
        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {sent_message.message_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        bot.send_message(message.chat.id, "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º!")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def handle_moderator_chat_message(message):
    if message.text and message.text.startswith('/'):
        return

    if not is_moderator(message.from_user.id):
        bot.send_message(message.chat.id,
                         f"‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É —á–∞—Ç–∞.\n"
                         f"–í–∞—à ID: {message.from_user.id}\n"
                         f"–í–ª–∞–¥–µ–ª–µ—Ü: {OWNER_ID}")
        return

    if message.reply_to_message:
        reply_to_msg_id = message.reply_to_message.message_id
        print(f"üîç –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è {reply_to_msg_id} –≤ –±–∞–∑–µ: {list(user_messages.keys())[:5]}...")

        if reply_to_msg_id in user_messages:
            user_id = user_messages[reply_to_msg_id]
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {reply_to_msg_id}")

            try:
                moderator_name = message.from_user.first_name
                if message.from_user.username:
                    moderator_name += f" (@{message.from_user.username})"

                if message.content_type == 'text':
                    bot.send_message(user_id,
                                     f"üì© –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ {moderator_name}:\n\n{message.text}")
                else:
                    caption = f"üì© –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ {moderator_name}"
                    if message.caption:
                        caption += f":\n\n{message.caption}"

                    if message.content_type == 'photo':
                        bot.send_photo(user_id, message.photo[-1].file_id, caption=caption)
                    elif message.content_type == 'document':
                        bot.send_document(user_id, message.document.file_id, caption=caption)
                    elif message.content_type == 'video':
                        bot.send_video(user_id, message.video.file_id, caption=caption)
                    elif message.content_type == 'audio':
                        bot.send_audio(user_id, message.audio.file_id, caption=caption)
                    elif message.content_type == 'voice':
                        bot.send_voice(user_id, message.voice.file_id, caption=caption)
                    elif message.content_type == 'sticker':
                        bot.send_sticker(user_id, message.sticker.file_id)
                        bot.send_message(user_id, f"üì© –°—Ç–∏–∫–µ—Ä –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ {moderator_name}")

                bot.send_message(moderators_chat_id,
                                 f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}!")

            except Exception as e:
                error_msg = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: {e}"
                print(error_msg)
                bot.send_message(moderators_chat_id, error_msg)
        else:
            print(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {reply_to_msg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ")
            bot.send_message(moderators_chat_id,
                             "‚ùå –≠—Ç–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ–Ω–æ —É—Å—Ç–∞—Ä–µ–ª–æ.")


def handle_owner_message(message):
    if message.text == "–û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤":
        if update_moderators_from_chat():
            bot.send_message(message.chat.id, f"‚úÖ –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω! –í—Å–µ–≥–æ: {len(moderators)}")
        else:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ.")


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    try:
        print(f"üîî Callback received: {call.data} from {call.from_user.id}")

        if call.data.startswith('reply_'):
            user_id = int(call.data.split('_')[1])
            bot.answer_callback_query(call.id,
                                      "üì® –û—Ç–≤–µ—Ç—å—Ç–µ (reply) –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

        elif call.data.startswith('info_'):
            user_id = int(call.data.split('_')[1])
            info = get_user_info(user_id)
            bot.answer_callback_query(call.id, "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
            bot.send_message(call.message.chat.id, info)

        elif call.data == "refresh_mods":
            if is_moderator(call.from_user.id):
                if update_moderators_from_chat():
                    bot.answer_callback_query(call.id, "‚úÖ –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                    bot.edit_message_text(f"‚úÖ –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω! –í—Å–µ–≥–æ: {len(moderators)}",
                                          call.message.chat.id, call.message.message_id,
                                          reply_markup=refresh_keyboard())
                else:
                    bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
            else:
                bot.answer_callback_query(call.id, "‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")


@bot.message_handler(content_types=['new_chat_members'])
def handle_new_members(message):
    handle_cold_start()
    if message.chat.id == moderators_chat_id:
        for new_member in message.new_chat_members:
            if not new_member.is_bot:
                bot.send_message(moderators_chat_id,
                                 f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {new_member.first_name}! –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É.")


def run_bot_with_restart():
    restart_attempts = 0
    max_restarts = 5

    while restart_attempts < max_restarts:
        try:
            print("ü§ñ Starting Telegram bot...")
            bot.infinity_polling(
                allowed_updates=['message', 'callback_query'],
                timeout=90,
                long_polling_timeout=90,
                skip_pending=True
            )
        except Exception as e:
            restart_attempts += 1
            print(f"‚ùå Bot crashed (attempt {restart_attempts}/{max_restarts}): {e}")

            if restart_attempts >= max_restarts:
                print("üö® Max restart attempts reached. Exiting.")
                break

            wait_time = min(30 * restart_attempts, 300)
            print(f"üîÑ Restarting in {wait_time} seconds...")
            time.sleep(wait_time)


def main():
    print("üöÄ Initializing Telegram Moderator Bot...")

    try:
        import psutil
        import requests
        import telebot
        from dotenv import load_dotenv
    except ImportError as e:
        print(f"‚ùå Missing dependency: {e}")
        print("üì¶ Install with: pip install -r requirements.txt")
        return

    http_thread = threading.Thread(target=run_http_server, daemon=True)
    http_thread.start()
    print("üåê HTTP server started on port 5000")

    start_keep_alive()
    print("üîÑ Keep-alive service started")

    try:
        if moderators_chat_id:
            update_moderators_from_chat()

        print(f"‚úÖ –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞: {OWNER_ID}")
        print(f"‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Å–ø–∏—Å–∫–µ: {len(moderators)}")

        run_bot_with_restart()

    except KeyboardInterrupt:
        print("üëã Bot stopped by user")
    except Exception as e:
        print(f"üí• Fatal error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()